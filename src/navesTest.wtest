import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveLlena.carga())
	}
	
	test "propulsar sin velocidad (vacía) queda a 20.000kms" {
		naveVacia.propulsar()
		assert.equals(20000, naveVacia.velocidad())
	}
}

describe "Nave de pasajeros" {
	
	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}

	test "propulsar yendo a 290.000Kms queda a 300.000kms" {
		naveConPasajeros.propulsar()
		assert.equals(300000, naveConPasajeros.velocidad())
	}
	
	//NUEVO
	test "al preparar con una velocidad de 290.000kms su nueva velocidad es de 300.000kms." {
		naveConPasajeros.preparar()
		assert.equals(300000, naveConPasajeros.velocidad())
	}
}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}

	//NUEVO
	test "al preparar en modo ataque sin moverse emite el mensaje Volviendo a la base y queda con velocidad de 15.000 kms" {
		naveEnAtaque.velocidad(0)
		naveEnAtaque.preparar()
		assert.equals("Volviendo a la base", naveEnAtaque.ultimoMensaje())
	}

	//NUEVO
	test "al preparar en modo reposo sin moverse emite el mensaje Volviendo a la base y queda con velocidad de 15.000 kms" {
		naveEnReposo.velocidad(0)
		naveEnReposo.preparar()
		assert.equals("Saliendo en misión", naveEnReposo.ultimoMensaje())
		assert.equals("Saliendo en misión", naveEnReposo.ultimoMensaje())
	}
}

describe "Nave de residuos radiactivos" {

	const naveLlena = new NaveDeResiduosRadiactivos(carga = 5000, velocidad = 10000, selladaAlVacio = true)

	test "al recibir amenaza reduce su velocidad a 0 y no pierde su carga" {
		naveLlena.recibirAmenaza()
		assert.equals(5000, naveLlena.carga())
		assert.equals(0, naveLlena.velocidad())
	}
	
	//NUEVO
	test "al preparar nave detenida queda sellada al vacío y su velocidad es de 15.000kms" {
		naveLlena.selladaAlVacio(false)
		naveLlena.recibirAmenaza()
		naveLlena.preparar()
		assert.that(naveLlena.selladaAlVacio())
		assert.equals(15000, naveLlena.velocidad())
	}
}
